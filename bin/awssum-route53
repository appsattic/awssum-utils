#!/usr/bin/perl
## ----------------------------------------------------------------------------

use strict;
use warnings;
use Data::Dump qw(pp);
use Config::Simple;
use Getopt::Mixed "nextOption";
use AwsSum::Amazon::Route53;

my $VERBOSE = 0;
my $DEBUG = 0;

my $option_type = {
    values => q{array},
};

## ----------------------------------------------------------------------------

{
    # firstly, get the various options and config options
    my $opt = get_opt();
    my $cfg = get_cfg( $opt );

    debug_pp( q{Options}, $opt );
    debug_pp( q{Config}, $cfg );

    my $route53 = AwsSum::Amazon::Route53->new();
    $route53->access_key_id( $cfg->{'Amazon-AwsAccessKeyId'} );
    $route53->secret_access_key( $cfg->{'Amazon-AwsSecretAccessKey'} );
    $route53->account_number( $cfg->{'Amazon-AccountNumber'} )
        if $cfg->{'Amazon-AccountNumber'};

    my $command = shift @ARGV;
    unless ( defined $command ) {
        usage( q{Please specify a command} );
    }

    if ( $command eq q{list} ) { 
        cmd_list( $route53, $opt );
    }
    elsif ( $command eq q{create} ) {
        cmd_create( $route53, $opt );
    }
    elsif ( $command eq q{show} ) {
        cmd_show( $route53, $opt );
    }
    elsif ( $command eq q{list-records} ) {
        cmd_list_records( $route53, $opt );
    }
    elsif ( $command eq q{create-record} ) {
        cmd_create_record( $route53, $opt );
    }
    elsif ( $command eq q{delete-record} ) {
        cmd_delete_record( $route53, $opt );
    }
    else {
        usage( q{Unknown Command} );
    }
}

sub cmd_list {
    my ($route53, $opt) = @_;

    my $res = $route53->list_hosted_zones({});
    debug_pp( q{List Zones}, $res );

    if ( $res->{_awssum}{ok} ) {
        # loop through all the zones
        foreach my $zone ( @{$res->{HostedZones}} ) {
            print "$zone->{Name} $zone->{Id}\n";
        }
    }
    else {
        error($res);
    }
}

sub cmd_create {
    my ($route53, $opt) = @_;

    my $res = $route53->create_hosted_zone({
        ZoneName => $opt->{zone},
        $opt->{reference} ? ( CallerReference => $opt->{reference} ) : (),
        $opt->{comment} ? ( Comment => $opt->{comment} ) : (),
    });
    debug_pp( q{Create}, $res );

    unless ( $res->{_awssum}{ok} ) {
        error($res);
    }
}

sub cmd_show {
    my ($route53, $opt) = @_;

    my $res = $route53->get_hosted_zone({
        ZoneId => $opt->{id}
    });
    debug_pp( q{Create}, $res );

    if ( $res->{_awssum}{ok} ) {
        # show some info about the zone first
        key_value( q{Name}, $res->{HostedZone}{Name} );
        key_value( q{Id}, $res->{HostedZone}{Id} );
        key_value( q{CallerReference}, $res->{HostedZone}{CallerReference} );

        # the nameserver
        key_value( q{NameServer 1}, $res->{DelegationSet}{NameServers}[0] );
        key_value( q{NameServer 2}, $res->{DelegationSet}{NameServers}[1] );
        key_value( q{NameServer 3}, $res->{DelegationSet}{NameServers}[2] );
        key_value( q{NameServer 4}, $res->{DelegationSet}{NameServers}[3] );

    }
    else {
        error($res);
    }
}

sub cmd_list_records {
    my ($route53, $opt) = @_;

    my $res = $route53->list_resource_record_sets({
        ZoneId => $opt->{id}
    });
    debug_pp( q{Create}, $res );

    if ( $res->{_awssum}{ok} ) {
        foreach my $set ( @{$res->{ResourceRecords}} ) {
            foreach my $value ( @{$set->{Values}} ) {
                print qq{$set->{Name} $set->{TTL} $set->{Type} $value\n};
            }
        }
    }
    else {
        error($res);
    }
}

sub cmd_create_record {
    my ($route53, $opt) = @_;

    my $res = $route53->change_resource_record_sets({
        ZoneId  => $opt->{id},
        Action  => q{CREATE},
        Name    => $opt->{name},
        Type    => $opt->{type},
        TTL     => $opt->{ttl},
        Values  => $opt->{values},
        Comment => $opt->{comment},
    });
    debug_pp( q{Create}, $res );

    if ( $res->{_awssum}{ok} ) {

    }
    else {
        error($res);
    }
}

sub cmd_delete_record {
    my ($route53, $opt) = @_;

    my $res = $route53->change_resource_record_sets({
        ZoneId  => $opt->{id},
        Action  => q{DELETE},
        Name    => $opt->{name},
        Type    => $opt->{type},
        TTL     => $opt->{ttl},
        Values  => $opt->{values},
        Comment => $opt->{comment},
    });
    debug_pp( q{Create}, $res );

    if ( $res->{_awssum}{ok} ) {

    }
    else {
        error($res);
    }
}

## ----------------------------------------------------------------------------

sub error {
    my ($result) = @_;
    print STDERR qq{$result->{_awssum}{error}: $result->{_awssum}{message}\n};
    exit 2;
}

sub debug {
    my ($msg, $pp) = @_;
    print qq{$msg\n} if $DEBUG;
    print STDERR qq{$msg:}
}

sub debug_pp {
    my ($name, $pp) = @_;
    return unless $DEBUG;
    print STDERR qq{$name = };
    pp($pp);
}

sub verbose {
    my ($msg) = @_;
    print qq{$msg\n} if $VERBOSE;
}

sub key_value {
    my ($key, $value) = @_;
    print qq{$key } . ( ' ' x (20 - length $key) ) . qq{ : $value\n};
}

sub get_opt {
    my $opt = {};

    # all the long and short option names
    my @options = qw(
        zone=s        z>zone
        name=s        n>name
        id=s          i>id
        reference=s   r>reference
        comment=s     c>comment
        filename=s    f>filename
        type=s        t>type
        ttl=s         l>ttl
        values=s      v>values
        verbose
        debug
    );
    Getopt::Mixed::init( join(q{ }, @options) );

    # loop through all options
    while ( my ($name, $value) = nextOption() ) {
        if ( exists $option_type->{$name} && $option_type->{$name} eq q{array} ) {
            push @{$opt->{$name}}, $value;
        }
        else {
            $opt->{$name} = $value;
        }
    }
    Getopt::Mixed::cleanup();

    # process the boolean options
    foreach my $name ( qw(verbose debug) ) {
        $opt->{$name} = exists $opt->{$name} ? 1 : 0;
    }

    # set these globals
    $DEBUG = $opt->{debug};
    $VERBOSE = $opt->{verbose};

    return $opt;
}

sub get_cfg {
    my ($option) = @_;

    my $cfg = {};

    # so, read either the normal config or that defined on the command line
    my $filename = $option->{f} || $ENV{AWSSUM_ROUTE53_CFG} || qq{$ENV{HOME}/.awssum};
    Config::Simple->import_from( $filename, $cfg );

    return $cfg;
}

sub usage {
    my ($err) = @_;

    if ( defined $err ) {
        print "Error: $err\n";
    }

    print STDERR <<"EOF";
Usage: $0 command [opts...]

Commands:

  * list
  * create          -z <ZoneName>
  * show            -i <ZoneId>
  * list-records    -i <ZoneId>
  * create-record   -i <ZoneId> -n <ZoneName> -t <Type> -l <TTL> -v <Value> [-v <Value> ...] -c <Comment>
  * delete-record   -i <ZoneId> -n <ZoneName> -t <Type> -l <TTL> -v <Value> [-v <Value> ...] -c <Comment>
  * status          -i <ChangeId>
  * inc-soa         -i <ZoneId> -s (rfc|inc)

Options:

  -z, --zone                the zone/domain name. e.g. changelog.at
  -n, --name                the (sub-)domain name. e.g. changelog.at, www.changelog.at
  -r, --reference           a unique string relevant to this action
  -c, --comment             a string you'd like to store with this action
  -t, --type                resource record type e.g. A, AAAA, CNAME, MX, NS, PTR, SOA, SPF, SRV, TXT
  -l, --ttl                 time to live for this resource record
  -v, --values              the values of this resource record (one or more)
  -s, --soa                 where rfc=YYYYMMDDNN and inc=N (N is incremented in both cases)
  -f, --filename            the config file to use (default: ~/.awssum)
      --verbose             turn verbose mode on
      --debug               turn debug mode on

See <http://github.com/appsattic/awssum-utils/> for further information.
Report bugs to <chilts\@appsattic.com>.
EOF

    # exit differently if we were called in error
    exit defined $err ? 2 : 0;
}

## ----------------------------------------------------------------------------
